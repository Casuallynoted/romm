"""empty message

Revision ID: 0014_asset_files
Revises: 0013_upgrade_file_extension
Create Date: 2024-01-07 09:45:09.632571

"""

import os

import sqlalchemy as sa
from alembic import op
from config import ROMM_DB_DRIVER
from config.config_manager import SQLITE_DB_BASE_PATH, ConfigManager
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# revision identifiers, used by Alembic.
revision = "0014_asset_files"
down_revision = "0013_upgrade_file_extension"
branch_labels = None
depends_on = None


def migrate_to_mysql() -> None:
    if ROMM_DB_DRIVER != "mariadb":
        raise Exception("Version 3.0 requires MariaDB as database driver!")

    # Skip if sqlite database is not mounted
    if not os.path.exists(f"{SQLITE_DB_BASE_PATH}/romm.db"):
        return

    maria_engine = create_engine(ConfigManager.get_db_engine(), pool_pre_ping=True)
    maria_session = sessionmaker(bind=maria_engine, expire_on_commit=False)

    sqlite_engine = create_engine(
        f"sqlite:////{SQLITE_DB_BASE_PATH}/romm.db", pool_pre_ping=True
    )
    sqlite_session = sessionmaker(bind=sqlite_engine, expire_on_commit=False)

    # Copy all data from sqlite to maria
    with maria_session.begin() as maria_conn:
        with sqlite_session.begin() as sqlite_conn:
            maria_conn.execute(text("SET FOREIGN_KEY_CHECKS=0"))

            tables = sqlite_conn.execute(
                text("SELECT name FROM sqlite_master WHERE type='table';")
            ).fetchall()
            for table_name in tables:
                table_name = table_name[0]
                if table_name == "alembic_version":
                    continue

                table_data = sqlite_conn.execute(
                    text(f"SELECT * FROM {table_name}")
                ).fetchall()

                # Insert data into MariaDB table
                if table_name == "roms":
                    for row in table_data:
                        summary = tuple(row)[15].replace('"', '\\"').replace("'", "\\'")
                        maria_conn.execute(
                            text(
                                f'INSERT INTO {table_name} (id, igdb_id, p_igdb_id, sgdb_id, p_sgdb_id, platform_slug, p_name, file_name, file_name_no_tags, file_extension, file_path, file_size, file_size_units, name, slug, summary, path_cover_s, path_cover_l, revision, tags, multi, files, url_cover, url_screenshots, path_screenshots, regions, languages) VALUES ({tuple(row)[0]}, {tuple(row)[1]}, "{tuple(row)[2]}", {tuple(row)[3]}, "{tuple(row)[4]}", "{tuple(row)[5]}", "{tuple(row)[6]}", "{tuple(row)[7]}", "{tuple(row)[8]}", "{tuple(row)[9]}", "{tuple(row)[10]}", {tuple(row)[11]}, "{tuple(row)[12]}", "{tuple(row)[13]}", "{tuple(row)[14]}", "{summary}", "{tuple(row)[16]}", "{tuple(row)[17]}", "{tuple(row)[18]}", \'{tuple(row)[19]}\', {tuple(row)[20]}, \'{tuple(row)[21]}\', "{tuple(row)[22]}", \'{tuple(row)[23]}\', \'{tuple(row)[24]}\', \'{tuple(row)[25]}\', \'{tuple(row)[26]}\')'.replace(
                                    "None,", "null,"
                                )
                            )
                        )
                else:
                    for row in table_data:
                        maria_conn.execute(
                            text(
                                f"INSERT INTO {table_name} VALUES {tuple(row)}".replace(
                                    "None,", "null,"
                                )
                            )
                        )

            maria_conn.execute(text("SET FOREIGN_KEY_CHECKS=1"))


def upgrade() -> None:

    migrate_to_mysql()

    ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "saves",
        sa.Column("emulator", sa.String(length=50), nullable=True),
        sa.Column("rom_id", sa.Integer(), nullable=False),
        sa.Column("platform_slug", sa.String(length=50), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("file_name", sa.String(length=450), nullable=False),
        sa.Column("file_name_no_tags", sa.String(length=450), nullable=False),
        sa.Column("file_extension", sa.String(length=10), nullable=False),
        sa.Column("file_path", sa.String(length=1000), nullable=False),
        sa.Column("file_size_bytes", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["platform_slug"], ["platforms.slug"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["rom_id"], ["roms.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "screenshots",
        sa.Column("rom_id", sa.Integer(), nullable=False),
        sa.Column("platform_slug", sa.String(length=50), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("file_name", sa.String(length=450), nullable=False),
        sa.Column("file_name_no_tags", sa.String(length=450), nullable=False),
        sa.Column("file_extension", sa.String(length=10), nullable=False),
        sa.Column("file_path", sa.String(length=1000), nullable=False),
        sa.Column("file_size_bytes", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["platform_slug"], ["platforms.slug"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["rom_id"], ["roms.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "states",
        sa.Column("emulator", sa.String(length=50), nullable=True),
        sa.Column("rom_id", sa.Integer(), nullable=False),
        sa.Column("platform_slug", sa.String(length=50), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("file_name", sa.String(length=450), nullable=False),
        sa.Column("file_name_no_tags", sa.String(length=450), nullable=False),
        sa.Column("file_extension", sa.String(length=10), nullable=False),
        sa.Column("file_path", sa.String(length=1000), nullable=False),
        sa.Column("file_size_bytes", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["platform_slug"], ["platforms.slug"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["rom_id"], ["roms.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("states")
    op.drop_table("screenshots")
    op.drop_table("saves")
    # ### end Alembic commands ###
